# -*- coding: utf-8 -*-
"""ML_LAB_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCSSZlwjqMC0_SaQfF1CB4AwS1Z9rimL

Name:Harsh Pandit

Roll No:H036

Program : Mechatronics

Division:H

Batch: H1

Date of Experiment: 16/12/2021

Date of Submission: 25/12/2021
"""

import numpy as np
from sklearn.linear_model import LinearRegression
import pandas as pd
import matplotlib.pyplot as plt
#import warnings
#warnings.filterwarnings('ignore')

df=pd.read_excel('Hours and marks.xlsx')#reads the excel file

plt.bar(df)

df_hours=df[['Hours']]

df_hours

df_Marks=df[['Marks']]

plt.scatter(df_hours,df_Marks,color='green',marker='*')#plots the scatterplot
plt.xlabel('Marks')
plt.ylabel('Hours')

x=df_hours
y=df_Marks
model=LinearRegression()
model.fit(x,y)

print('intercept:',model.intercept_)#variable_name.intercept_ , prints the intercept of the linear regression model
print('slope:',model.coef_)#variable_name.coef_ , prints the slope  of the linear regression model

r_sq=model.score(x,y)#gives r^2 of the linear regression model
print('r^2 is :',r_sq)

model.predict([[10]]) #predicts the value for partiular x

ypred=model.predict(x) #gives predicted value of y
ypred

df['Predicted Marks']=ypred #created a new column of y predicted

df

df['markdPred']='NULL'

df

plt.scatter(df_hours,df_Marks,color='green',marker='o')
plt.xlabel('Marks')
plt.ylabel('Hours')
plt.plot(df_hours,ypred,color='black')

df.to_excel('Hours and marks.xlsx')#converted to exel file

y_mean=df['Marks'].mean()
y_mean #y_mean is average of marks

df['yi-y(mean)']=df['Marks']-y_mean

df

x_mean=df['Hours'].mean()
df['xi-x(mean)']=df['Hours']-x_mean
df

df['xi-x(mean)*yi-y(mean)']=df['yi-y(mean)']*df['xi-x(mean)']

df

SST=(df['yi-y(mean)'])**2
SST=SST.sum()
SST

SSE=(df['Marks']-df['Predicted Marks'])**2
SSE=SSE.sum()
SSE

SSR=SST-SSE
SSR

r_squared=SSR/SST
r_squared

b1=df['xi-x(mean)*yi-y(mean)'].sum()/(df['xi-x(mean)']**2).sum()
b1=b1.sum()
b1

x_mean=df['Hours'].mean()
x_mean

b0=y_mean-(b1*x_mean)
b0

r=r_squared**0.5
r

x_ref=10
y_ref=(x_ref*b1)+b0
y_ref

"""Conlcusion: Hence we implemented the linear regerssion method with help of inbuilt tools as well as without using the inbuilt package. We verfied the both the methods using values and found the same answer. We found out SST(120.83333333333333),SSR(119.57633587786259) and SSE(1.256997455470738) using both the methods which came to be approximately equal. We also found the predicted value of y
using predicted value of x=10 which came to equal.
"""
# -*- coding: utf-8 -*-
"""ML_LAB_08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ERUFK8uSQBOuUE-C6wH3mPEwREW4zAFS

Name:Harsh Pandit

Roll No:H036

Program : Mechatronics

Division:H

Batch: H1

Date of Experiment: 10/02/2022

Date of Submission: 15/02/2022
"""

#importing all relevant libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

#reading the file
df=pd.read_csv('diabetes.csv')
df.describe()

#checking presence of Null values
df.isnull()

#removing null values
df=df.dropna()
df.describe()

#replacing 0 values with mean
l=[]
for i in df['BloodPressure']:
  if i!=np.nan:
    l.append(i)
mean=sum(l)
mean=sum(l)/len(l)
for i in range (0,len(df['BloodPressure'])):
  if df['BloodPressure'].iloc[i]==0:
    df['BloodPressure'].iloc[i]=mean

#replacing 0 values with mean
l=[]
for i in df['Glucose']:
  if i!=np.nan:
    l.append(i)
mean=sum(l)
mean=sum(l)/len(l)
for i in range (0,len(df['Glucose'])):
  if df['Glucose'].iloc[i]==0:
    df['Glucose'].iloc[i]=mean

#replacing 0 values with mean
l=[]
for i in df['SkinThickness']:
  if i!=np.nan:
    l.append(i)
mean=sum(l)
mean=sum(l)/len(l)
for i in range (0,len(df['SkinThickness'])):
  if df['SkinThickness'].iloc[i]==0:
    df['SkinThickness'].iloc[i]=mean

#replacing 0 values with mean
l=[]
for i in df['Insulin']:
  if i!=np.nan:
    l.append(i)
mean=sum(l)
mean=sum(l)/len(l)
for i in range (0,len(df['Insulin'])):
  if df['Insulin'].iloc[i]==0:
    df['Insulin'].iloc[i]=mean

#replacing 0 values with mean
l=[]
for i in df['BMI']:
  if i!=np.nan:
    l.append(i)
mean=sum(l)
mean=sum(l)/len(l)
for i in range (0,len(df['BMI'])):
  if df['BMI'].iloc[i]==0:
    df['BMI'].iloc[i]=mean

df.describe()

#define x and y values
x=df.drop('Outcome',axis=1)
y=df['Outcome']

#scaling the x values
scaler = StandardScaler()
x = scaler.fit_transform(x)
mod=MinMaxScaler()
x=mod.fit_transform(x)

#splitting the values
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

#definig the model
model=DecisionTreeClassifier(random_state=0)
model.fit(x_train,y_train)

#finding out predicted values
y_pred=model.predict(x_test)

#finding out the accuracy
acc=accuracy_score(y_test, y_pred)
print('The accuracy is: ',acc)

"""Conclusion: Hence the Descision Tree algorithm was implemented succesfully. The accuracy was found to be 72%."""
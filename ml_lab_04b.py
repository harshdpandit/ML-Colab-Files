# -*- coding: utf-8 -*-
"""ML_LAB_04b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CnGTjROGbt4iZBZLbmaL1qdO1XySwEgB
"""

#importing all pakages
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import plotly.express as px #for scatter plot matrix. we can also use seabone
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant

df=pd.read_csv('DiamondsNew.csv')#read the excel
df=df.drop('Unnamed: 0',axis=1)
df1=df.drop('price',axis=1)#made a new dataframe with only independent variables
df

#replaced the values with numbers
df['color']=df['color'].replace(('D','E','F','G','H','I','J'),value=(0,1,2,3,4,5,6))
df['clarity']=df['clarity'].replace(("IF",'VVS1','VVS2','VS1','VS2','SI1','SI2','I1','I2','I3'),value=(8,7,6,5,4,3,2,1,0,0))
df['cut']=df['cut'].replace(('Ideal','Premium','Very Good','Good','Fair'),value=(4,3,2,1,0))
df

df.describe()
df['volume']=df['x']*df['y']*df['z']#made a new column
df=df.drop('x',axis = 1 )#dropped x column
df=df.drop('y',axis = 1 )#dropped y column
df=df.drop('z',axis = 1 )#dropped z column

df

df=df[df['volume']!=0]#dropped all values of volume=0
df

#calculated VIF value for all independent varibles
df1=df.drop('price',axis=1)
VIF_data=pd.DataFrame()
df1=add_constant(df1)
VIF_data["Independent Variables"]=df1.columns
VIF_data['VIF']=[variance_inflation_factor(df1.values,i) for i in range(len(df1.columns))]
VIF_data

df=df.drop(['volume','carat'],axis=1) #dropped volume and carat due to high VIF
df

df1=df1.drop(['volume','carat'],axis=1)#dropped volume and carat due to high VIF
df1

y=df['price']
x=df1
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size= 0.2)#split the data in test and train

model = LinearRegression() #Create a linear regression model
model.fit(x_train,y_train)

y_prediction =  model.predict(x_test)#predicted the value of y
y_test

SSE=(np.sum((y_prediction-y_test)**2))#calculated SSE
print('The SSE is:',SSE)
MSE=SSE/(len(y_test)-len(df1.columns)-1)#calculated MSE
print('The MSE is:',MSE)
r_MSE=MSE**0.5
print('The r_MSE is:',r_MSE)

x=sm.add_constant(x)
mod=sm.OLS(y,x)
fit=mod.fit()
fit.summary()

"""Conclusion: Hence multiple linear regression was performed was for given dataset and the categorical variables were replaced by integer values."""